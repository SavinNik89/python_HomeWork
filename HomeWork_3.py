import math

#**************************************************
# 1.	Найти НОК двух чисел

print('*********************Задача № 1************************')


def gcd (max_num, min_num):
    while max_num % min_num != 0:
        temp = max_num % min_num
        max_num = min_num
        min_num = temp
    return  min_num


A = int(input('Введите первое число: '))
B = int(input('Введите второе число: '))
max_num = 0
min_num = 0
result = 0
if A > B:
    max_num = A
    min_num = B
else:
    max_num = B
    min_num = A
if (max_num % min_num) == 0:
    print(f'НОК чисел {A} и {B} = {max_num}')
else:
    gcd_num = gcd(max_num, min_num)
    lcm_num = (max_num*min_num)/gcd_num
    print(f'НОК чисел {A} и {B} = {int(lcm_num)}')


#**************************************************
# 2.	Вычислить число Пи c заданной точностью d
# Пример: при d = 0.001,  c= 3.141.

print('****************Задача № 2*****************')

p = 0.0
k = 1
for k in range(1, 1000000):
    p = p+4*((-1)**(k+1))/(2*k-1)
print(round(p, 3))

#***************************************************************************************************
# 3.	Составить список простых множителей натурального числа N

print('*****************Задача № 3********************')

def found_divis(number):
    divisors = []
    for i in range(2, number):
        if number % i == 0 and simple_num(i) is True:
            divisors.append(i)
            number /= 2
    return divisors


def simple_num(number):
    count = 0
    for j in range(2, number // 2 + 1):
        if number % j == 0:
            count += 1
    if count == 0:
        return True
    else:
        return False

N = int(input('Введите число: '))
simple_div = found_divis(N)
print(f'Простые делители числа {N}: {simple_div}')
#
#***************************************************************************************************
# 4.	Дана последовательность чисел. Получить список неповторяющихся элементов исходной последовательности
# Пример: [1, 2, 3, 5, 1, 5, 3, 10] => [1, 2, 3, 5, 10]

print('***************Задача № 4******************')

input_list = [1, 2, 3, 5, 1, 5, 3, 10]
result_list = set(input_list)
print(result_list)

#***************************************************************************************************
# + на тему файловой системы:
# 5.  Дан текстовый файл, содержащий целые числа. Удалить из него все четные числа.

# 1, 3, 4, 6, 5, 8, 7, 12, 14, 11, 13, 65, 22, 42, 31
print('*****************Задача № 5*******************')

with open('lesson3_task5.txt', 'r+') as file:
    nums = file.read()
    nums_list = [int(i) for i in nums.split(', ')]
    print(nums_list)
    result_list = []
    for j in nums_list:
        if j % 2 != 0:
            result_list.append(j)
    print(result_list)
f = open('lesson3_task5.txt', 'w')
f.write(', '.join(map(str, result_list)))
f.close()


# Экстра-задачи:

#****************************************************************************************************
# 1.	Определите функцию, которая принимает римскую цифру в качестве аргумента и возвращает ее значение в виде числового
# десятичного целого числа. Вам не нужно проверять форму римской цифры.
# Современные римские цифры записываются путем выражения каждой десятичной цифры числа, которое должно быть
# закодировано отдельно, начиная с самой левой цифры. Таким образом, 1990 отображается "MCMXC" (1000 = M, 900 = CM, 90 = XC),
# а 2008 отображается "MMVIII" (2000 = MM, 8 = VIII). Римская цифра для 1666, "MDCLXVI", использует каждую букву в порядке убывания.
# Пример: имя_вашей_функции ('XXI') # должно вернуть 21
#

print('**************Экстра № 1**************')


def roman_int(roman):
    roman_numerals = [("M", 1000), ("CM", 900), ("D", 500), ("CD", 400), ("C", 100), ("XC", 90), ("L", 50), ("XL", 40), ("X", 10),
                      ("IX", 9), ("V", 5), ("IV", 4), ("I", 1)]
    result = 0
    pos = 0
    for i in roman:
        while pos < len(roman):
            for n, m in roman_numerals:
                if roman.startswith(n, pos):
                    result += m
                    pos += len(n)
                    break
    print(f'Представление римского числа в десятичном числе: {result}')


def chek_roman_numb():
    simbol_list = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V",  "IV", "I"]
    while True:
        roman = input('Введите римское число: ').upper()
        for j in roman:
            if j not in simbol_list:
                print('Неверный формат числа, повторите ввод')
                break
            else:
                return roman



roman = chek_roman_numb()
roman_int(roman)



#****************************************************************************************************
# 2.	Определите функцию, которая удаляет весь текст, следующий за любым из переданных маркеров комментариев.
# Любые пробелы в конце строки также должны быть удалены.
# Пример:
# Входные данные:
# «apples, pears # and bananas
# grapes
# bananas !apples          »
# Выходные данные:
# «apples, pears
# grapes
# bananas»
# Функция может вызываться вот так:
# result = function("apples, pears # and bananas\ngrapes\nbananas !apples", ["#", "!"])

# print('****************Экстра № 2*****************')
#
# def del_text_marker(string, markers):




# ******************************************************************************************************************
# 3.	Начиная в вершине треугольника (см. пример ниже) и перемещаясь вниз на смежные числа, максимальная сумма
# до основания составляет 23.
# 3
# 7 4
# 2 4 6
# 8 5 9_seminar 3
# То есть, 3 + 7 + 4 + 9_seminar = 23.
# Найдите максимальную сумму пути от вершины до основания следующего треугольника:
# 75
# 95 64
# 17 47 82
# 18 35 87 10
# 20 04 82 47 65
# 19 01 23 75 03 34
# 88 02 77 73 07 63 67
# 99 65 04 28 06 16 70 92
# 41 41 26 56 83 40 80 70 33
# 41 48 72 33 47 32 37 16 94 29
# 53 71 44 65 25 43 91 52 97 51 14
# 70 11 33 28 77 73 17 78 39 68 17 57
# 91 71 52 38 17 14 91 43 58 50 27 29 48
# 63 66 04 68 89 53 67 30 73 16 69 87 40 31
# 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23


# *******************************************************************************************
# 4 . Сумма квадратов первых десяти натуральных чисел равна
# 12 + 22 + ... + 102 = 385
# Квадрат суммы первых десяти натуральных чисел равен
# (1 + 2 + ... + 10)2 = 552 = 3025
# Следовательно, разность между суммой квадратов и квадратом суммы первых десяти натуральных чисел составляет 3025 − 385 = 2640.
# Найдите разность между суммой квадратов и квадратом суммы первых ста натуральных чисел.
